// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, hashed_password, created_at)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    NOW()
) RETURNING id, username, hashed_password, created_at
`

type CreateUserParams struct {
	Username       string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
	)
	return i, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT id, hashed_password
FROM users
WHERE username = $1
`

type FindUserByUsernameRow struct {
	ID             uuid.UUID
	HashedPassword string
}

func (q *Queries) FindUserByUsername(ctx context.Context, username string) (FindUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, findUserByUsername, username)
	var i FindUserByUsernameRow
	err := row.Scan(&i.ID, &i.HashedPassword)
	return i, err
}
