// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sessions.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, score, accuracy, created_at, player_id)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    NOW(),
    $3
) RETURNING id, score, accuracy, created_at, player_id
`

type CreateSessionParams struct {
	Score    int32
	Accuracy string
	PlayerID uuid.UUID
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.Score, arg.Accuracy, arg.PlayerID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Score,
		&i.Accuracy,
		&i.CreatedAt,
		&i.PlayerID,
	)
	return i, err
}

const getPlayerBestSession = `-- name: GetPlayerBestSession :one
SELECT id, score, accuracy, created_at, player_id FROM sessions
WHERE player_id = $1
ORDER BY score DESC
LIMIT 1
`

func (q *Queries) GetPlayerBestSession(ctx context.Context, playerID uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getPlayerBestSession, playerID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Score,
		&i.Accuracy,
		&i.CreatedAt,
		&i.PlayerID,
	)
	return i, err
}

const getTopTenScores = `-- name: GetTopTenScores :many
SELECT sessions.id, score, accuracy, sessions.created_at, player_id, users.id, username, hashed_password, users.created_at FROM sessions
INNER JOIN users
ON sessions.player_id = users.id
ORDER BY score DESC, sessions.created_at DESC
LIMIT 10
`

type GetTopTenScoresRow struct {
	ID             uuid.UUID
	Score          int32
	Accuracy       string
	CreatedAt      time.Time
	PlayerID       uuid.UUID
	ID_2           uuid.UUID
	Username       string
	HashedPassword string
	CreatedAt_2    time.Time
}

func (q *Queries) GetTopTenScores(ctx context.Context) ([]GetTopTenScoresRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopTenScores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopTenScoresRow
	for rows.Next() {
		var i GetTopTenScoresRow
		if err := rows.Scan(
			&i.ID,
			&i.Score,
			&i.Accuracy,
			&i.CreatedAt,
			&i.PlayerID,
			&i.ID_2,
			&i.Username,
			&i.HashedPassword,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
