// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sessions.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, score, accuracy, created_at, player_id)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    NOW(),
    $3
) RETURNING id, score, accuracy, created_at, player_id
`

type CreateSessionParams struct {
	Score    int32
	Accuracy string
	PlayerID uuid.UUID
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.Score, arg.Accuracy, arg.PlayerID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Score,
		&i.Accuracy,
		&i.CreatedAt,
		&i.PlayerID,
	)
	return i, err
}

const getPlayerBestSession = `-- name: GetPlayerBestSession :one
SELECT id, score, accuracy, created_at, player_id FROM sessions
WHERE player_id = $1
ORDER BY score DESC
LIMIT 1
`

func (q *Queries) GetPlayerBestSession(ctx context.Context, playerID uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getPlayerBestSession, playerID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Score,
		&i.Accuracy,
		&i.CreatedAt,
		&i.PlayerID,
	)
	return i, err
}
